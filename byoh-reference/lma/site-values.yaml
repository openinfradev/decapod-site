apiVersion: openinfradev.github.com/v1
kind: HelmValuesTransformer
metadata:
  name: site

global:
  nodeSelector:
    taco-lma: enabled
  clusterName: cluster.local
  storageClassName: taco-storage
  repository: https://openinfradev.github.io/helm-repo/
  serviceScrapeInterval: 30s
  defaultPassword: password
  defaultUser: taco
  thanosObjstoreSecret: taco-objstore-secret

  lokiHost: loki-loki-distributed-gateway
  lokiPort: 80
  lokiuserHost: loki-user-loki-distributed-gateway
  lokiuserPort: 80
  s3Service: "minio.lma.svc:9000" # depends on $lmaNameSpace (ex. minio.taco-system.svc)

  lmaNameSpace: lma

  TksWebhookUrl: "FixItByWF"
  SlackUrl: "FixItByWF"
  SlackChannel: '#temporary-alert'

  grafanaDatasourceMetric: lma-prometheus:9090
  thanosQueryStores:
  - thanos-storegateway:10901
  - prometheus-operated:10901

  # servicemesh dashboard and grafana
  realms: 04a70f29
  consoleUrl: tks-console.taco-cat.xyz
  grafanaDomain: taco-cat.xyz
  keycloakDomain: keycloak-eom.taco-cat.xyz
  grafanaClientSecret: JLtsanYtrCg21RGxrcVmQP0GeuDFUhpA

  awsNlbAnnotation:
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: '*'
    service.beta.kubernetes.io/aws-load-balancer-type: nlb

  tksIamRoles: []

charts:
- name: prometheus-operator
  override:
    prometheusOperator.nodeSelector: $(nodeSelector)
    prometheusOperator.admissionWebhooks.patch.image.sha: ""
    prometheusOperator.image.repository: tks/prometheus-operator
    prometheusOperator.admissionWebhooks.patch.image.repository: tks/kube-webhook-certgen
    prometheusOperator.prometheusConfigReloader.image.repository: tks/prometheus-config-reloader
    prometheusOperator.thanosImage.repository: tks/thanos

- name: prometheus
  override:
    kubeEtcd.enabled: true
    prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec.storageClassName: $(storageClassName)
    prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec.resources.requests.storage: 20Gi
    prometheus.prometheusSpec.retention: 2d
    prometheus.prometheusSpec.externalLabels.taco_cluster: $(clusterName)
    prometheus.prometheusSpec.nodeSelector: $(nodeSelector)
    prometheus.prometheusSpec.serviceMonitorNamespaceSelector.matchLabels.name: $(lmaNameSpace)
    prometheus.prometheusSpec.podMonitorNamespaceSelector.matchLabels.name: $(lmaNameSpace)
    prometheus.prometheusSpec.ruleNamespaceSelector.matchLabels.name: $(lmaNameSpace)
    prometheus.thanosServiceExternal.annotations: $(awsNlbAnnotation)
    prometheus.thanosServiceExternal:
      type: NodePort
      nodePort: 30004
    alertmanager.service.type: NodePort
    alertmanager.service.nodePort: 30111
    alertmanager.alertmanagerSpec.alertmanagerConfigSelector.matchLabels.alertmanagerConfig: example
    alertmanager.alertmanagerSpec.nodeSelector: $(nodeSelector)
    alertmanager.alertmanagerSpec.retention: 2h
    alertmanager.config:
      global:
        slack_api_url: $(SlackUrl)
      receivers:
      - name: tks-alert
        webhook_configs:
        - send_resolved: true
          url: $(TksWebhookUrl)
      route:
        group_by:
        - alertname
        group_wait: 10s
        receiver: tks-alert
        repeat_interval: 1h

- name: prometheus-node-exporter
  override:
    hostNetwork: false

- name: kube-state-metrics
  override:
    nodeSelector: $(nodeSelector)
    kubeVersion: v1.25.7

- name: prometheus-pushgateway
  override:
    nodeSelector: $(nodeSelector)

- name: prometheus-process-exporter
  override:
    conf.processes: dockerd,kubelet,kube-proxy,ntpd,node
    pod.hostNetwork: false

- name: grafana
  override:
    adminPassword: password
    persistence.storageClassName: $(storageClassName)
    sidecar.dashboards.searchNamespace: ALL
    # grafana oidc
    service:
      type: NodePort
      nodePort: 30001
    service.annotations: $(awsNlbAnnotation)
    grafana\.ini:
      server:
        domain: $(grafanaDomain)
        root_url: http://$(grafanaDomain)
        serve_from_sub_path: true
      auth.generic_oauth:
        enabled: true
        name: keycloak
        allow_sign_up: true
        client_id: grafana
        client_secret: $(grafanaClientSecret)
        scopes: openid profile email
        login_attribute_path: username
        auth_url: https://$(keycloakDomain)/auth/realms/$(realms)/protocol/openid-connect/auth
        token_url: https://$(keycloakDomain)/auth/realms/$(realms)/protocol/openid-connect/token
        api_url: https://$(keycloakDomain)/auth/realms/$(realms)/protocol/openid-connect/userinfo
        signout_redirect_url: $(consoleUrl)/login
      auth:
        disable_login_form: false
        oauth_auto_login: true
        disable_signout_menu: true
      user:
        auto_assign_org: true
        auto_assign_org_role: Admin

- name: fluent-operator

- name: fluentbit
  override:
    fluentbit:
      clusterName: $(clusterName)
      outputs:
        loki:
        - name: taco-loki
          host: $(lokiHost)
          port: $(lokiPort)
        lokiuser:
        - name: taco-loki-user
          host: $(lokiuserHost)
          port: $(lokiuserPort)
      targetLogs:
      - tag: kube.*
        bufferChunkSize: 2M
        bufferMaxSize: 5M
        do_not_store_as_default: false
        index: container
        loki_name: taco-loki-user
        memBufLimit: 20MB
        multi_index:
        - index: platform
          loki_name: taco-loki
          key: $kubernetes['namespace_name']
          value: kube-system|$(lmaNameSpace)|taco-system|gatekeeper-system|argo
        parser: docker
        path: /var/log/containers/*.log
        type: kubernates
        extraArgs:
          multilineParser: docker, cri
      - tag: syslog.*
        loki_name: taco-loki
        index: syslog
        parser: taco-syslog-parser-for-ubuntu
        path: /var/log/messages
        type: syslog

- name: addons
  override:
    SPECIAL_VALUE: SPECIAL
    serviceMonitor.trident:
      enabled: false
      interval: $(serviceScrapeInterval)
    serviceMonitor.kubelet.interval: 30s
    serviceMonitor.additionalScrapeConfigs:
    grafanaDashboard.istio.enabled: false
    grafanaDashboard.jaeger.enabled: false
    grafanaDashboard.namespace: $(lmaNameSpace)
    grafanaDatasource.namespace: $(lmaNameSpace)
    serviceMonitor.istio.enabled: false
    serviceMonitor.jaeger.enabled: false
    serviceMonitor.argocd.enabled: false
    serviceMonitor.argowf.enabled: false
    prometheusRules.alert.enabled: false
    prometheusRules.istio.aggregation.enabled: false
    prometheusRules.istio.optimization.enabled: false
    grafanaDatasource.prometheus.url: $(grafanaDatasourceMetric)
    # grafanaDatasource.prometheus.url: "thanos-query.lma:9090"
    grafanaDatasource.loki.url: $(lokiHost):$(lokiPort)

- name: prometheus-adapter
  override:
    nodeSelector: $(nodeSelector)

- name: kubernetes-event-exporter
  override:
    clustername: $(clusterName)

    conf.recievers:
      - name: loki
        type: file
        config:
          path: "/tmp/kubernetes-event.log"
    addons:
      loki:
        enabled: true
        host: $(lokiHost)
        port: $(lokiPort)
        target_file: "/tmp/kubernetes-event.log"
    conf.default.hosts:
    - "https://eck-elasticsearch-es-http.lma.svc.$(clusterName):9200"

- name: minio
  override:
    users:
      - accessKey: $(defaultUser)
        secretKey: $(defaultPassword)
        policy: consoleAdmin
    buckets:
      - name: tks-thanos
        policy: public
        purge: false
        versioning: true
        objectlocking: false
      - name: tks-loki
        policy: public
        purge: false
        versioning: true
        objectlocking: false
    persistence.storageClass: $(storageClassName)
    persistence.size: 500Gi
    persistence.accessMode: ReadWriteOnce
    service:
      type: NodePort
      nodePort: 30003
    service.annotations: $(awsNlbAnnotation)
    # deploy target node's label
    consoleIngress.nodeSelector: $(nodeSelector)
    postJob.nodeSelector: $(nodeSelector)


- name: thanos
  override:
    global.storageClass: $(storageClassName)
    # temporarily add annotation because a cluster is using not cluster-name but 'cluster.local'
    # clusterDomain: $(clusterName)
    existingObjstoreSecret: $(thanosObjstoreSecret)
    query.nodeSelector: $(nodeSelector)
    query.service.type: ClusterIP
    query.service.annotations: $(awsNlbAnnotation)
    queryFrontend.nodeSelector: $(nodeSelector)
    queryFrontend.service:
      nodePorts:
        http: 30005
      type: NodePort
    queryFrontend.enabled: true
    queryFrontend.config: |-
        type: IN-MEMORY
        config:
          max_size: 512MB
          max_size_items: 100
          validity: 100s
    queryFrontend.extraFlags: []
    querier.stores: $(thanosQueryStores)
    bucketweb.nodeSelector: $(nodeSelector)
    compactor.nodeSelector: $(nodeSelector)
    storegateway.nodeSelector: $(nodeSelector)
    compactor.persistence.size: 8Gi
    # compactor.extraFlags:
    # - --compact.enable-vertical-compaction
    # - --deduplication.replica-label="replica"
    storegateway.persistence.size: 8Gi
    ruler.nodeSelector: $(nodeSelector)
    ruler.alertmanagers:
    - http://alertmanager-operated:9093
    ruler.persistence.size: 8Gi
    ruler.service:
      type: NodePort
      nodePort: 30007
    ruler.config:
      groups:
        - name: "tks"
          rules:
          - alert: "PrometheusDown"
            expr: absent(up{prometheus="lma/lma-prometheus"})

              
- name: thanos-config
  override:
    objectStorage:
      secretName: $(thanosObjstoreSecret)
      rawConfig:
        bucket: tks-thanos
        endpoint: $(s3Service)
        access_key: $(defaultUser)
        secret_key: $(defaultPassword)
        insecure: true
    sidecarsService.name: thanos-sidecars
    sidecarsService.endpoints:
      - 192.168.97.102 # should not be in the loopback range (127.0.0.0/8)

- name: prepare-etcd-secret
  override:
    nodeSelector:
      "node-role.kubernetes.io/control-plane": ""
    tolerations:
      - key: "node-role.kubernetes.io/control-plane"
        effect: "NoSchedule"
        operator: "Exists"

- name: loki
  override:
    global.dnsService: kube-dns
    # global.clusterDomain: $(clusterName) # annotate cluste because the cluster name is still cluster.local regardless cluster
    gateway.service:
      type: NodePort
      nodePort: 30002
    gateway.service.annotations: $(awsNlbAnnotation)
    ingester.persistence.storageClass: $(storageClassName)
    distributor.persistence.storageClass: $(storageClassName)
    queryFrontend.persistence.storageClass: $(storageClassName)
    ruler.persistence.storageClass: $(storageClassName)
    indexGateway.persistence.storageClass: $(storageClassName)
    # select target node's label
    ingester.nodeSelector: $(nodeSelector)
    distributor.nodeSelector: $(nodeSelector)
    querier.nodeSelector: $(nodeSelector)
    queryFrontend.nodeSelector: $(nodeSelector)
    queryScheduler.nodeSelector: $(nodeSelector)
    tableManager.nodeSelector: $(nodeSelector)
    gateway.nodeSelector: $(nodeSelector)
    compactor.nodeSelector: $(nodeSelector)
    ruler.nodeSelector: $(nodeSelector)
    indexGateway.nodeSelector: $(nodeSelector)
    memcachedChunks.nodeSelector: $(nodeSelector)
    memcachedFrontend.nodeSelector: $(nodeSelector)
    memcachedIndexQueries.nodeSelector: $(nodeSelector)
    memcachedIndexWrites.nodeSelector: $(nodeSelector)
    loki:
      storageConfig:
        aws:
          s3: http://$(defaultUser):$(defaultPassword)@$(s3Service)/minio

- name: loki-user
  override:
    global.dnsService: kube-dns
    gateway.service:
      type: NodePort
      nodePort: 30006
    gateway.service.annotations: $(awsNlbAnnotation)
    ingester.persistence.storageClass: $(storageClassName)
    distributor.persistence.storageClass: $(storageClassName)
    queryFrontend.persistence.storageClass: $(storageClassName)
    ruler.persistence.storageClass: $(storageClassName)
    indexGateway.persistence.storageClass: $(storageClassName)
    # select target node's label
    ingester.nodeSelector: $(nodeSelector)
    distributor.nodeSelector: $(nodeSelector)
    querier.nodeSelector: $(nodeSelector)
    queryFrontend.nodeSelector: $(nodeSelector)
    queryScheduler.nodeSelector: $(nodeSelector)
    tableManager.nodeSelector: $(nodeSelector)
    gateway.nodeSelector: $(nodeSelector)
    compactor.nodeSelector: $(nodeSelector)
    ruler.nodeSelector: $(nodeSelector)
    indexGateway.nodeSelector: $(nodeSelector)
    memcachedChunks.nodeSelector: $(nodeSelector)
    memcachedFrontend.nodeSelector: $(nodeSelector)
    memcachedIndexQueries.nodeSelector: $(nodeSelector)
    memcachedIndexWrites.nodeSelector: $(nodeSelector)
    loki:
      storageConfig:
        aws:
          s3: http://$(defaultUser):$(defaultPassword)@$(s3Service)/minio

- name: lma-bucket
  override:
    s3.enabled: true
    s3.buckets:
    - name: $(clusterName)-tks-thanos
    - name: $(clusterName)-tks-loki
    tks.iamRoles: $(tksIamRoles)
